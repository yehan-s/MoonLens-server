{
  "id": "snapshot_1758736351530_h3g72o1d8",
  "approvalId": "approval_1758736351503_vqpiid0jp",
  "approvalTitle": "用户认证API系统需求文档审批",
  "version": 1,
  "timestamp": "2025-09-24T17:52:31.530Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements: User Authentication API System\n\n## Overview\nMoonLens 用户认证 API 系统为前端客户端提供安全的身份验证、授权和用户管理服务，支持传统邮箱注册登录和 GitLab OAuth 集成，确保系统安全性和用户体验。\n\n## User Stories\n\n### 1. 用户注册 API\n**作为** API 服务\n**我需要** 提供用户注册接口\n**以便于** 支持前端用户通过邮箱注册账号\n\n**验收标准**：\n- 接收注册请求（邮箱、密码、用户名）\n- 验证邮箱格式和唯一性\n- 验证密码强度（至少8位，包含大小写字母和数字）\n- 密码 bcrypt 加密存储（salt rounds: 10）\n- 成功注册后返回用户信息和 JWT Token\n- 记录注册日志和审计信息\n\n### 2. 用户登录 API\n**作为** API 服务\n**我需要** 提供用户登录验证接口\n**以便于** 支持前端用户身份验证\n\n**验收标准**：\n- 接收登录请求（邮箱、密码）\n- 验证用户凭据\n- 实现登录失败锁定机制（5次失败锁定15分钟）\n- 成功登录返回 JWT Token 和用户信息\n- 记录登录历史和异常登录检测\n- 支持多设备登录管理\n\n### 3. GitLab OAuth 集成 API\n**作为** API 服务\n**我需要** 集成 GitLab OAuth 2.0 认证\n**以便于** 支持用户通过 GitLab 账号登录\n\n**验收标准**：\n- 提供 OAuth 授权 URL 生成接口\n- 处理 GitLab OAuth 回调\n- 获取 GitLab 用户信息和访问令牌\n- 首次登录自动创建关联账号\n- 存储 GitLab 访问令牌和用户 ID\n- 支持令牌刷新和过期处理\n\n### 4. JWT Token 管理 API\n**作为** API 服务\n**我需要** 提供 Token 管理和验证服务\n**以便于** 支持前端会话管理\n\n**验收标准**：\n- 生成 JWT Access Token（7天有效期）\n- 生成 Refresh Token（30天有效期）\n- 提供 Token 刷新接口\n- Token 验证中间件\n- Token 黑名单管理（退出登录时）\n- 多设备 Token 管理\n\n### 5. 密码重置 API\n**作为** API 服务\n**我需要** 提供密码重置功能\n**以便于** 支持忘记密码的用户重置密码\n\n**验收标准**：\n- 接收密码重置请求\n- 生成重置令牌（24小时有效）\n- 发送重置邮件（集成邮件服务）\n- 验证重置令牌有效性\n- 处理密码重置请求\n- 重置后使所有旧 Token 失效\n\n### 6. 用户资料管理 API\n**作为** API 服务\n**我需要** 提供用户资料 CRUD 接口\n**以便于** 支持前端用户信息管理\n\n**验收标准**：\n- 获取用户资料接口\n- 更新用户基本信息（用户名、头像）\n- 修改密码接口（需验证旧密码）\n- 修改邮箱接口（需邮箱验证）\n- 用户状态管理（激活、锁定、注销）\n- 数据脱敏处理\n\n## Functional Requirements\n\n### FR1: 认证服务层\n- **FR1.1**: 实现 JWT Token 生成和验证服务\n- **FR1.2**: 实现密码加密和验证服务\n- **FR1.3**: 实现登录失败锁定机制\n- **FR1.4**: 实现 Token 刷新机制\n- **FR1.5**: 实现多设备登录管理\n\n### FR2: OAuth 集成层\n- **FR2.1**: GitLab OAuth 2.0 集成\n- **FR2.2**: 第三方用户信息同步\n- **FR2.3**: 访问令牌管理和刷新\n- **FR2.4**: OAuth 错误处理和重试\n- **FR2.5**: 账号关联和绑定\n\n### FR3: 用户管理层\n- **FR3.1**: 用户 CRUD 操作\n- **FR3.2**: 用户状态管理\n- **FR3.3**: 用户权限角色管理\n- **FR3.4**: 用户活动日志记录\n- **FR3.5**: 用户数据隐私保护\n\n### FR4: 邮件服务层\n- **FR4.1**: 邮箱验证邮件发送\n- **FR4.2**: 密码重置邮件发送\n- **FR4.3**: 邮件模板管理\n- **FR4.4**: 邮件发送队列\n- **FR4.5**: 邮件发送状态追踪\n\n### FR5: 安全服务层\n- **FR5.1**: 请求频率限制\n- **FR5.2**: 异常登录检测\n- **FR5.3**: IP 黑名单管理\n- **FR5.4**: 安全审计日志\n- **FR5.5**: 敏感操作二次验证\n\n## Non-Functional Requirements\n\n### NFR1: 性能要求\n- **NFR1.1**: 登录接口响应时间 < 300ms\n- **NFR1.2**: Token 验证时间 < 50ms\n- **NFR1.3**: 支持 10,000 并发用户\n- **NFR1.4**: 数据库查询优化（索引覆盖）\n- **NFR1.5**: 缓存策略优化（Redis）\n\n### NFR2: 安全要求\n- **NFR2.1**: 所有 API 强制 HTTPS 传输\n- **NFR2.2**: SQL 注入防护（Prisma ORM）\n- **NFR2.3**: XSS 攻击防护（输入验证）\n- **NFR2.4**: CSRF 令牌验证\n- **NFR2.5**: API 访问速率限制\n\n### NFR3: 可用性要求\n- **NFR3.1**: API 可用性 99.9%\n- **NFR3.2**: 错误响应标准化\n- **NFR3.3**: API 文档完整性（Swagger）\n- **NFR3.4**: 健康检查接口\n- **NFR3.5**: 优雅降级处理\n\n### NFR4: 可扩展性要求\n- **NFR4.1**: 水平扩展支持\n- **NFR4.2**: 数据库连接池管理\n- **NFR4.3**: 缓存分离部署\n- **NFR4.4**: 微服务架构兼容\n- **NFR4.5**: 负载均衡支持\n\n### NFR5: 监控要求\n- **NFR5.1**: API 调用监控\n- **NFR5.2**: 错误日志聚合\n- **NFR5.3**: 性能指标收集\n- **NFR5.4**: 安全事件告警\n- **NFR5.5**: 健康状态监控\n\n## API Specifications\n\n### Authentication APIs\n\n#### POST /api/auth/register\n```json\n{\n  \\\"request\\\": {\n    \\\"email\\\": \\\"string\\\",\n    \\\"password\\\": \\\"string\\\", \n    \\\"username\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"user\\\": {\n      \\\"id\\\": \\\"uuid\\\",\n      \\\"email\\\": \\\"string\\\",\n      \\\"username\\\": \\\"string\\\",\n      \\\"avatar\\\": \\\"string\\\"\n    },\n    \\\"tokens\\\": {\n      \\\"accessToken\\\": \\\"string\\\",\n      \\\"refreshToken\\\": \\\"string\\\"\n    }\n  }\n}\n```\n\n#### POST /api/auth/login\n```json\n{\n  \\\"request\\\": {\n    \\\"email\\\": \\\"string\\\",\n    \\\"password\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"user\\\": {...},\n    \\\"tokens\\\": {...}\n  }\n}\n```\n\n#### POST /api/auth/refresh\n```json\n{\n  \\\"request\\\": {\n    \\\"refreshToken\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"accessToken\\\": \\\"string\\\",\n    \\\"refreshToken\\\": \\\"string\\\"\n  }\n}\n```\n\n#### POST /api/auth/logout\n```json\n{\n  \\\"request\\\": {\n    \\\"refreshToken\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Logged out successfully\\\"\n  }\n}\n```\n\n### GitLab OAuth APIs\n\n#### GET /api/auth/gitlab/url\n```json\n{\n  \\\"response\\\": {\n    \\\"authUrl\\\": \\\"string\\\",\n    \\\"state\\\": \\\"string\\\"\n  }\n}\n```\n\n#### POST /api/auth/gitlab/callback\n```json\n{\n  \\\"request\\\": {\n    \\\"code\\\": \\\"string\\\",\n    \\\"state\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"user\\\": {...},\n    \\\"tokens\\\": {...}\n  }\n}\n```\n\n### User Management APIs\n\n#### GET /api/users/profile\n```json\n{\n  \\\"response\\\": {\n    \\\"id\\\": \\\"uuid\\\",\n    \\\"email\\\": \\\"string\\\",\n    \\\"username\\\": \\\"string\\\",\n    \\\"avatar\\\": \\\"string\\\",\n    \\\"gitlabUserId\\\": \\\"string\\\",\n    \\\"createdAt\\\": \\\"datetime\\\"\n  }\n}\n```\n\n#### PUT /api/users/profile\n```json\n{\n  \\\"request\\\": {\n    \\\"username\\\": \\\"string\\\",\n    \\\"avatar\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"user\\\": {...}\n  }\n}\n```\n\n#### POST /api/users/change-password\n```json\n{\n  \\\"request\\\": {\n    \\\"oldPassword\\\": \\\"string\\\",\n    \\\"newPassword\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Password changed successfully\\\"\n  }\n}\n```\n\n### Password Reset APIs\n\n#### POST /api/auth/forgot-password\n```json\n{\n  \\\"request\\\": {\n    \\\"email\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Reset email sent\\\"\n  }\n}\n```\n\n#### POST /api/auth/reset-password\n```json\n{\n  \\\"request\\\": {\n    \\\"token\\\": \\\"string\\\",\n    \\\"newPassword\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Password reset successfully\\\"\n  }\n}\n```\n\n## Database Requirements\n\n### User Table Schema\n```sql\nCREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  username VARCHAR(50) UNIQUE NOT NULL,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  full_name VARCHAR(100),\n  avatar VARCHAR(500),\n  is_active BOOLEAN DEFAULT true,\n  gitlab_user_id VARCHAR(50),\n  gitlab_access_token TEXT,\n  preferences JSON,\n  failed_login_attempts INT DEFAULT 0,\n  locked_until TIMESTAMP,\n  email_verified_at TIMESTAMP,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW(),\n  \n  INDEX idx_email (email),\n  INDEX idx_username (username),\n  INDEX idx_gitlab_user_id (gitlab_user_id)\n);\n```\n\n### Token Blacklist Table Schema\n```sql\nCREATE TABLE token_blacklist (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  token_hash VARCHAR(255) NOT NULL,\n  user_id UUID NOT NULL,\n  expires_at TIMESTAMP NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  \n  INDEX idx_token_hash (token_hash),\n  INDEX idx_expires_at (expires_at),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n### Login History Table Schema\n```sql\nCREATE TABLE login_history (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID NOT NULL,\n  ip_address INET,\n  user_agent TEXT,\n  login_method VARCHAR(20), -- 'email' or 'gitlab'\n  success BOOLEAN NOT NULL,\n  failure_reason VARCHAR(100),\n  created_at TIMESTAMP DEFAULT NOW(),\n  \n  INDEX idx_user_id (user_id),\n  INDEX idx_created_at (created_at),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n## Service Dependencies\n\n### External Dependencies\n- **GitLab OAuth API**: 用户信息获取和令牌管理\n- **邮件服务**: 密码重置和验证邮件发送\n- **Redis**: 缓存和会话存储\n- **MySQL/PostgreSQL**: 用户数据持久化\n\n### Internal Dependencies\n- **配置服务**: JWT 密钥、OAuth 配置\n- **日志服务**: 操作日志和错误日志\n- **队列服务**: 异步任务处理\n- **通知服务**: 系统通知推送\n\n## Security Considerations\n\n### Authentication Security\n- JWT 使用 RS256 算法签名\n- Token 包含最小必要信息\n- Refresh Token 单次使用机制\n- 密码复杂度强制验证\n\n### Authorization Security\n- 基于角色的访问控制（RBAC）\n- 资源级别权限验证\n- API 路径权限映射\n- 操作权限审计\n\n### Data Protection\n- 敏感数据加密存储\n- PII 数据脱敏处理\n- 数据传输加密\n- 数据备份加密\n\n## Error Handling\n\n### Error Response Format\n```json\n{\n  \\\"error\\\": {\n    \\\"code\\\": \\\"AUTH_001\\\",\n    \\\"message\\\": \\\"Invalid credentials\\\",\n    \\\"details\\\": \\\"Email or password is incorrect\\\",\n    \\\"timestamp\\\": \\\"2025-01-01T00:00:00Z\\\"\n  }\n}\n```\n\n### Error Codes\n- **AUTH_001**: 无效凭据\n- **AUTH_002**: 账户被锁定\n- **AUTH_003**: Token 已过期\n- **AUTH_004**: Token 无效\n- **AUTH_005**: 邮箱已存在\n- **AUTH_006**: 密码不符合要求\n- **OAUTH_001**: OAuth 授权失败\n- **OAUTH_002**: OAuth 令牌无效\n\n## Constraints\n\n### Technical Constraints\n- NestJS + TypeScript + Prisma 技术栈\n- JWT 认证机制\n- RESTful API 设计规范\n- OpenAPI 3.0 文档标准\n- Docker 容器化部署\n\n### Business Constraints\n- 用户注册需邮箱验证\n- 密码强度策略不可降低\n- OAuth 仅支持 GitLab\n- 多设备登录限制（同时最多5台设备）\n- 数据保留期限符合 GDPR 要求\n\n### Performance Constraints\n- 单实例支持 1000 并发用户\n- 数据库连接池大小限制\n- Redis 内存使用限制\n- API 响应时间 SLA\n\n## Acceptance Criteria\n\n### AC1: 用户注册流程\n1. 接收有效注册请求\n2. 验证邮箱格式和唯一性\n3. 验证密码复杂度\n4. 创建用户记录\n5. 生成 JWT Token\n6. 返回用户信息和 Token\n7. 记录注册日志\n\n### AC2: 用户登录流程\n1. 接收登录请求\n2. 验证用户凭据\n3. 检查账户状态\n4. 更新登录历史\n5. 生成 JWT Token\n6. 返回认证信息\n\n### AC3: OAuth 集成流程\n1. 生成 GitLab OAuth URL\n2. 处理 OAuth 回调\n3. 获取用户信息\n4. 创建/更新用户账号\n5. 生成系统 Token\n6. 返回认证结果\n\n### AC4: Token 管理流程\n1. 生成访问令牌\n2. 生成刷新令牌\n3. 验证令牌有效性\n4. 处理令牌刷新\n5. 管理令牌黑名单\n\n## Dependencies\n\n### External Dependencies\n- GitLab OAuth API v4\n- SMTP 邮件服务\n- Redis 缓存服务\n- 数据库服务\n\n### Internal Dependencies\n- 用户管理模块\n- 配置管理模块\n- 日志服务模块\n- 队列处理模块\n\n## Risks\n\n### 风险1: 安全漏洞\n- **影响**: 高\n- **概率**: 中\n- **缓解**: 定期安全审计、渗透测试、依赖更新\n\n### 风险2: OAuth API 变更\n- **影响**: 中\n- **概率**: 低\n- **缓解**: API 版本锁定、适配层设计、降级方案\n\n### 风险3: 性能瓶颈\n- **影响**: 高\n- **概率**: 中\n- **缓解**: 缓存优化、数据库优化、负载均衡\n\n### 风险4: 数据泄露\n- **影响**: 高\n- **概率**: 低\n- **缓解**: 数据加密、访问控制、审计日志\n\n## Success Metrics\n\n1. **API 响应时间** < 300ms (95th percentile)\n2. **API 可用性** > 99.9%\n3. **认证成功率** > 99%\n4. **Token 验证性能** < 50ms\n5. **安全事件数** = 0\n6. **代码覆盖率** > 90%\n7. **API 文档完整度** = 100%\n\n## Testing Requirements\n\n### Unit Testing\n- 认证服务单元测试覆盖率 > 90%\n- 用户管理服务单元测试覆盖率 > 90%\n- OAuth 集成单元测试覆盖率 > 85%\n\n### Integration Testing\n- API 端点集成测试\n- 数据库操作集成测试\n- 第三方服务集成测试\n\n### Security Testing\n- 认证绕过测试\n- Token 安全测试\n- 输入验证测试\n- 权限验证测试\n\n### Performance Testing\n- 并发用户负载测试\n- API 响应时间测试\n- 数据库性能测试\n- 缓存性能测试",
  "fileStats": {
    "size": 12960,
    "lines": 563,
    "lastModified": "2025-09-24T17:50:03.156Z"
  },
  "comments": []
}