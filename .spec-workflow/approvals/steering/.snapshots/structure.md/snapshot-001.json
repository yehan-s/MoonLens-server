{
  "id": "snapshot_1758733800061_uzgarrghm",
  "approvalId": "approval_1758733800057_uue9nvztp",
  "approvalTitle": "代码库结构文档 (structure.md) 审批",
  "version": 1,
  "timestamp": "2025-09-24T17:10:00.061Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Codebase Structure - MoonLens GitLab AI 代码审查平台\n\n## 项目概览\n\nMoonLens 采用典型的 NestJS 企业级应用架构，遵循模块化、分层设计原则。项目结构清晰，便于维护和扩展。\n\n## 目录结构\n\n```\nMoonLens-server/\n├── src/                    # 源代码目录\n│   ├── main.ts            # 应用入口点\n│   ├── app.module.ts      # 根模块\n│   ├── app.controller.ts  # 根控制器\n│   ├── app.service.ts     # 根服务\n│   │\n│   ├── auth/              # 认证授权模块\n│   │   ├── auth.module.ts\n│   │   ├── auth.controller.ts\n│   │   ├── auth.service.ts\n│   │   ├── auth.*.spec.ts\n│   │   └── dto/\n│   │       └── auth.dto.ts\n│   │\n│   ├── users/             # 用户管理模块\n│   │   ├── users.module.ts\n│   │   ├── users.controller.ts\n│   │   ├── users.service.ts\n│   │   └── users.*.spec.ts\n│   │\n│   ├── projects/          # 项目管理模块\n│   │   ├── projects.module.ts\n│   │   ├── projects.controller.ts\n│   │   ├── projects.service.ts\n│   │   └── projects.*.spec.ts\n│   │\n│   ├── gitlab/            # GitLab 集成模块\n│   │   ├── gitlab.module.ts\n│   │   ├── gitlab.controller.ts\n│   │   ├── gitlab.service.ts\n│   │   └── gitlab.*.spec.ts\n│   │\n│   ├── review/            # 代码审查核心模块\n│   │   ├── review.module.ts\n│   │   ├── review.controller.ts\n│   │   ├── review.service.ts\n│   │   └── review.*.spec.ts\n│   │\n│   ├── ai/                # AI 服务模块\n│   │   ├── ai.module.ts\n│   │   ├── ai.controller.ts\n│   │   ├── ai.service.ts\n│   │   └── ai.*.spec.ts\n│   │\n│   └── common/            # 共享模块\n│       ├── common.module.ts\n│       └── services/\n│           └── prisma.service.ts\n│\n├── prisma/                # 数据库相关\n│   └── schema.prisma     # 数据模型定义\n│\n├── test/                  # 端到端测试\n│   ├── app.e2e-spec.ts\n│   └── jest-e2e.json\n│\n├── .spec-workflow/        # 规范工作流\n│   └── steering/          # 指导文档\n│       ├── product.md\n│       ├── tech.md\n│       └── structure.md\n│\n├── .serena/              # Serena 代理配置\n│   ├── project.yml\n│   └── memories/\n│\n├── config files          # 配置文件\n│   ├── package.json\n│   ├── tsconfig.json\n│   ├── nest-cli.json\n│   ├── eslint.config.mjs\n│   ├── .prettierrc\n│   ├── docker-compose.yml\n│   ├── Dockerfile\n│   └── .env.example\n│\n└── documentation         # 项目文档\n    ├── README.md\n    ├── Architecture-Overview.md\n    ├── AGENTS.md\n    └── SPEC-GUIDE.md\n```\n\n## 架构分层\n\n### 1. 表现层（Presentation Layer）\n**位置**: `src/**/*.controller.ts`\n**职责**:\n- HTTP 请求/响应处理\n- 路由定义和参数验证\n- API 文档生成（Swagger）\n- 认证授权拦截\n\n**关键文件**:\n- `src/app.controller.ts` - 根控制器\n- `src/auth/auth.controller.ts` - 认证控制器\n- `src/gitlab/gitlab.controller.ts` - GitLab Webhook 接收\n- `src/review/review.controller.ts` - 审查任务管理\n- `src/ai/ai.controller.ts` - AI 服务控制\n\n### 2. 业务逻辑层（Business Logic Layer）\n**位置**: `src/**/*.service.ts`\n**职责**:\n- 核心业务逻辑实现\n- 服务间协调和编排\n- 业务规则验证\n- 事件处理和状态管理\n\n**关键服务**:\n```typescript\n// 核心服务架构\nAuthService          // 用户认证和 JWT 管理\nUsersService         // 用户生命周期管理\nProjectsService      // 项目配置和权限管理\nGitlabService        // GitLab API 集成和 Webhook 处理\nReviewService        // 代码审查流程编排\nAiService            // AI 提供商抽象和调用\n```\n\n### 3. 数据访问层（Data Access Layer）\n**位置**: `src/common/services/prisma.service.ts`\n**职责**:\n- 数据库连接管理\n- ORM 操作封装\n- 事务管理\n- 连接池优化\n\n**数据模型**:\n```typescript\n// 主要实体关系\nUser ----< Project ----< Review\n     ----< WebhookEvent\n             AIConfig (全局配置)\n             ReviewRule (审查规则)\n```\n\n## 模块化设计\n\n### 核心模块（Core Modules）\n\n#### AuthModule\n```typescript\n@Module({\n  imports: [JwtModule, PassportModule],\n  providers: [AuthService, JwtStrategy, LocalStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\n```\n**职责**: JWT 认证、密码验证、会话管理\n\n#### CommonModule\n```typescript\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n  global: true,\n})\n```\n**职责**: 共享服务、数据库连接、全局配置\n\n#### GitlabModule\n```typescript\n@Module({\n  imports: [BullModule.registerQueue({ name: 'review-queue' })],\n  providers: [GitlabService],\n  controllers: [GitlabController],\n})\n```\n**职责**: GitLab API 集成、Webhook 处理、事件队列\n\n#### ReviewModule\n```typescript\n@Module({\n  imports: [BullModule, AiModule],\n  providers: [ReviewService],\n  controllers: [ReviewController],\n})\n```\n**职责**: 审查流程编排、状态管理、结果存储\n\n#### AiModule\n```typescript\n@Module({\n  providers: [AiService],\n  controllers: [AiController],\n  exports: [AiService],\n})\n```\n**职责**: AI 提供商抽象、模型调用、响应处理\n\n### 依赖关系图\n```mermaid\ngraph TD\n    App[AppModule] --> Auth[AuthModule]\n    App --> Users[UsersModule]\n    App --> Projects[ProjectsModule]\n    App --> Gitlab[GitlabModule]\n    App --> Review[ReviewModule]\n    App --> AI[AiModule]\n    App --> Common[CommonModule]\n    \n    Auth --> Common\n    Users --> Common\n    Projects --> Common\n    Gitlab --> Common\n    Gitlab --> Review\n    Review --> AI\n    Review --> Common\n    AI --> Common\n```\n\n## 代码组织规范\n\n### 文件命名约定\n```\n功能模块/\n├── {module}.module.ts      # 模块定义\n├── {module}.controller.ts  # HTTP 控制器\n├── {module}.service.ts     # 业务服务\n├── {module}.*.spec.ts      # 单元测试\n├── dto/                    # 数据传输对象\n│   └── {feature}.dto.ts\n├── interfaces/             # TypeScript 接口\n│   └── {feature}.interface.ts\n└── guards/                 # 守卫和中间件\n    └── {feature}.guard.ts\n```\n\n### 代码分层原则\n\n#### 1. 控制器层（Controller）\n```typescript\n@Controller('reviews')\nexport class ReviewController {\n  constructor(private readonly reviewService: ReviewService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  async createReview(@Body() dto: CreateReviewDto) {\n    // 仅负责: 参数验证、权限检查、调用服务\n    return this.reviewService.create(dto);\n  }\n}\n```\n\n#### 2. 服务层（Service）\n```typescript\n@Injectable()\nexport class ReviewService {\n  constructor(\n    private prisma: PrismaService,\n    private aiService: AiService,\n  ) {}\n\n  async create(dto: CreateReviewDto) {\n    // 业务逻辑: 数据处理、服务协调、状态管理\n    const review = await this.prisma.review.create({...});\n    await this.aiService.processReview(review);\n    return review;\n  }\n}\n```\n\n#### 3. 数据访问层（Repository Pattern）\n```typescript\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n```\n\n## 数据库设计\n\n### 表结构概览\n```sql\nusers           # 用户账户和 GitLab 集成信息\nprojects        # GitLab 项目和审查配置\nreviews         # 代码审查记录和结果\nwebhook_events  # GitLab Webhook 事件日志\nai_configs      # AI 模型配置和 API 密钥\nreview_rules    # 自定义审查规则配置\n```\n\n### 关键索引策略\n```prisma\n// 性能优化索引\n@@index([projectId])        // 按项目查询\n@@index([status])           // 按状态过滤\n@@index([createdAt])        // 时间范围查询\n@@index([requestedById])    // 用户活动追踪\n```\n\n## 配置管理\n\n### 环境配置分层\n```typescript\n// 配置优先级（从高到低）\n1. 环境变量\n2. .env 文件\n3. ConfigModule 默认值\n4. 硬编码默认值\n```\n\n### 关键配置项\n```bash\n# 数据库\nDATABASE_URL=mysql://...\n\n# Redis 队列\nREDIS_HOST=localhost\nREDIS_PORT=6379\n\n# GitLab 集成\nGITLAB_BASE_URL=https://gitlab.com\nGITLAB_WEBHOOK_SECRET=...\n\n# AI 服务\nOPENAI_API_KEY=...\nANTHROPIC_API_KEY=...\n```\n\n## 测试策略\n\n### 测试文件组织\n```\nsrc/\n├── {module}/\n│   ├── {module}.service.spec.ts     # 单元测试\n│   └── {module}.controller.spec.ts  # 控制器测试\n└── test/\n    └── app.e2e-spec.ts               # 端到端测试\n```\n\n### 测试覆盖目标\n- **单元测试**: 覆盖率 > 80%\n- **集成测试**: 关键业务流程 100%\n- **E2E 测试**: 主要 API 端点验证\n\n## 部署和运维\n\n### Docker 容器化\n```dockerfile\n# 多阶段构建\nFROM node:18-alpine as builder\n# 构建优化...\n\nFROM node:18-alpine as production  \n# 生产运行...\n```\n\n### 服务监控\n```typescript\n// 健康检查端点\n@Get('health')\nhealthCheck(): HealthStatus {\n  return {\n    status: 'ok',\n    database: this.prisma.$queryRaw`SELECT 1`,\n    redis: this.redis.ping(),\n  };\n}\n```\n\n## 代码质量工具\n\n### Linting 和格式化\n```json\n{\n  \"scripts\": {\n    \"lint\": \"eslint \\\"{src,test}/**/*.ts\\\" --fix\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\"\",\n    \"test\": \"jest\",\n    \"test:cov\": \"jest --coverage\"\n  }\n}\n```\n\n### 代码质量标准\n- **ESLint**: 代码规范检查\n- **Prettier**: 代码格式化\n- **Husky**: Git hooks 自动化\n- **Jest**: 测试框架和覆盖率\n\n## 扩展性设计\n\n### 模块扩展点\n```typescript\n// 插件式架构示例\ninterface ReviewPlugin {\n  name: string;\n  execute(context: ReviewContext): Promise<ReviewResult>;\n}\n\n// 新增审查插件\nclass SecurityReviewPlugin implements ReviewPlugin {\n  async execute(context: ReviewContext) {\n    // 安全审查逻辑\n  }\n}\n```\n\n### 微服务演进路径\n```\n当前: 模块化单体\n├── 按模块垂直拆分\n├── 数据库分离\n├── 服务网格集成\n└── 独立部署和扩缩容\n```\n\n## 开发工作流\n\n### 分支策略\n```\nmain         # 生产环境\ndevelop      # 开发主分支\nfeature/*    # 功能分支\nhotfix/*     # 紧急修复\nrelease/*    # 版本发布\n```\n\n### 提交规范\n```\nfeat: 新功能\nfix: 修复\ndocs: 文档\nstyle: 格式\nrefactor: 重构\ntest: 测试\nchore: 构建/工具\n```\n\n---\n\n*本文档定义了 MoonLens 的代码库结构、架构分层和开发规范，确保团队成员能够快速理解和贡献代码。*",
  "fileStats": {
    "size": 10939,
    "lines": 452,
    "lastModified": "2025-09-24T17:09:40.061Z"
  },
  "comments": []
}