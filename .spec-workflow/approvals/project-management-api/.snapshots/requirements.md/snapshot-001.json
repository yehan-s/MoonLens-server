{
  "id": "snapshot_1758736368684_zdzehxg1f",
  "approvalId": "approval_1758736368682_w7a7nleis",
  "approvalTitle": "项目管理API系统需求文档审批",
  "version": 1,
  "timestamp": "2025-09-24T17:52:48.684Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements: Project Management API System\n\n## Overview\nMoonLens 项目管理 API 系统为前端提供项目组织、配置管理、团队协作和数据统计功能，是连接 GitLab 集成与 AI 审查的核心桥梁，确保项目生命周期管理的完整性和高效性。\n\n## User Stories\n\n### 1. 项目创建 API\n**作为** API 服务\n**我需要** 提供项目创建接口\n**以便于** 支持前端用户创建和配置项目\n\n**验收标准**：\n- 接收项目基本信息（名称、描述、GitLab 项目 ID）\n- 验证 GitLab 项目访问权限\n- 创建项目记录和默认配置\n- 设置项目创建者为管理员\n- 初始化 Webhook 配置\n- 返回完整项目信息\n\n### 2. 项目配置管理 API\n**作为** API 服务\n**我需要** 提供项目配置管理接口\n**以便于** 支持前端用户定制审查流程\n\n**验收标准**：\n- 提供配置项的 CRUD 接口\n- 支持审查规则配置\n- 支持 AI 模型选择配置\n- 支持触发条件设置\n- 支持通知规则配置\n- 配置变更历史记录\n\n### 3. 团队成员管理 API\n**作为** API 服务\n**我需要** 提供团队成员管理接口\n**以便于** 支持项目访问权限控制\n\n**验收标准**：\n- 添加/移除项目成员接口\n- 角色权限分配接口\n- 成员列表查询接口\n- 权限验证中间件\n- 成员活动日志记录\n- 批量成员操作支持\n\n### 4. GitLab 集成管理 API\n**作为** API 服务\n**我需要** 提供 GitLab 项目集成接口\n**以便于** 支持项目与 GitLab 的双向同步\n\n**验收标准**：\n- GitLab 项目验证接口\n- Webhook 配置管理接口\n- 项目同步状态检查\n- GitLab 事件处理接口\n- 同步失败重试机制\n- 集成健康检查\n\n### 5. 项目统计分析 API\n**作为** API 服务\n**我需要** 提供项目数据统计接口\n**以便于** 支持前端展示项目分析报告\n\n**验收标准**：\n- 审查统计数据接口\n- 代码质量指标接口\n- 团队贡献度分析接口\n- 趋势数据查询接口\n- 统计报表生成接口\n- 数据导出功能\n\n### 6. 项目生命周期管理 API\n**作为** API 服务\n**我需要** 提供项目状态管理接口\n**以便于** 支持项目的完整生命周期\n\n**验收标准**：\n- 项目状态更新接口\n- 项目归档/恢复接口\n- 项目删除（软删除）接口\n- 项目克隆/模板接口\n- 批量项目操作接口\n- 状态变更通知\n\n## Functional Requirements\n\n### FR1: 项目管理核心\n- **FR1.1**: 项目 CRUD 操作\n- **FR1.2**: 项目状态管理（活跃、归档、删除）\n- **FR1.3**: 项目克隆和模板功能\n- **FR1.4**: 项目搜索和筛选\n- **FR1.5**: 项目批量操作\n\n### FR2: 配置管理核心\n- **FR2.1**: 审查规则配置管理\n- **FR2.2**: AI 模型配置管理\n- **FR2.3**: 触发条件配置管理\n- **FR2.4**: 通知配置管理\n- **FR2.5**: 配置模板和版本管理\n\n### FR3: 权限管理核心\n- **FR3.1**: 基于角色的项目权限控制\n- **FR3.2**: 成员管理和角色分配\n- **FR3.3**: 权限继承和委托\n- **FR3.4**: 操作权限验证\n- **FR3.5**: 权限审计日志\n\n### FR4: GitLab 集成核心\n- **FR4.1**: GitLab 项目绑定和验证\n- **FR4.2**: Webhook 自动配置\n- **FR4.3**: 项目元数据同步\n- **FR4.4**: 分支和标签同步\n- **FR4.5**: 集成状态监控\n\n### FR5: 数据统计核心\n- **FR5.1**: 实时统计数据计算\n- **FR5.2**: 历史趋势数据分析\n- **FR5.3**: 自定义报表生成\n- **FR5.4**: 数据聚合和缓存\n- **FR5.5**: 统计数据导出\n\n## Non-Functional Requirements\n\n### NFR1: 性能要求\n- **NFR1.1**: 项目列表查询 < 500ms\n- **NFR1.2**: 配置保存响应 < 300ms\n- **NFR1.3**: 统计查询响应 < 1s\n- **NFR1.4**: 支持 1000+ 项目并发访问\n- **NFR1.5**: 批量操作性能优化\n\n### NFR2: 可扩展性要求\n- **NFR2.1**: 支持项目数量水平扩展\n- **NFR2.2**: 支持多租户隔离\n- **NFR2.3**: 支持插件化配置扩展\n- **NFR2.4**: 支持自定义字段扩展\n- **NFR2.5**: 支持微服务架构部署\n\n### NFR3: 安全性要求\n- **NFR3.1**: 项目级数据隔离\n- **NFR3.2**: 敏感配置加密存储\n- **NFR3.3**: API 访问权限验证\n- **NFR3.4**: 操作审计日志记录\n- **NFR3.5**: RBAC 权限模型\n\n### NFR4: 可用性要求\n- **NFR4.1**: API 可用性 99.9%\n- **NFR4.2**: 优雅的错误处理\n- **NFR4.3**: 完整的 API 文档\n- **NFR4.4**: 版本兼容性保证\n- **NFR4.5**: 健康检查机制\n\n### NFR5: 可维护性要求\n- **NFR5.1**: 模块化 API 设计\n- **NFR5.2**: 标准化错误响应\n- **NFR5.3**: 完善的日志记录\n- **NFR5.4**: 单元测试覆盖 > 85%\n- **NFR5.5**: API 版本管理\n\n## API Specifications\n\n### Project Management APIs\n\n#### POST /api/projects\n```json\n{\n  \\\"request\\\": {\n    \\\"name\\\": \\\"string\\\",\n    \\\"description\\\": \\\"string\\\",\n    \\\"gitlabProjectId\\\": \\\"string\\\",\n    \\\"gitlabProjectUrl\\\": \\\"string\\\",\n    \\\"defaultBranch\\\": \\\"string\\\"\n  },\n  \\\"response\\\": {\n    \\\"id\\\": \\\"uuid\\\",\n    \\\"name\\\": \\\"string\\\",\n    \\\"description\\\": \\\"string\\\",\n    \\\"gitlabProjectId\\\": \\\"string\\\",\n    \\\"gitlabProjectUrl\\\": \\\"string\\\",\n    \\\"defaultBranch\\\": \\\"string\\\",\n    \\\"isActive\\\": true,\n    \\\"ownerId\\\": \\\"uuid\\\",\n    \\\"reviewConfig\\\": {},\n    \\\"createdAt\\\": \\\"datetime\\\"\n  }\n}\n```\n\n#### GET /api/projects\n```json\n{\n  \\\"query\\\": {\n    \\\"page\\\": 1,\n    \\\"limit\\\": 20,\n    \\\"search\\\": \\\"string\\\",\n    \\\"status\\\": \\\"active|archived\\\",\n    \\\"ownerId\\\": \\\"uuid\\\"\n  },\n  \\\"response\\\": {\n    \\\"projects\\\": [...],\n    \\\"pagination\\\": {\n      \\\"page\\\": 1,\n      \\\"limit\\\": 20,\n      \\\"total\\\": 100,\n      \\\"totalPages\\\": 5\n    }\n  }\n}\n```\n\n#### GET /api/projects/:id\n```json\n{\n  \\\"response\\\": {\n    \\\"id\\\": \\\"uuid\\\",\n    \\\"name\\\": \\\"string\\\",\n    \\\"description\\\": \\\"string\\\",\n    \\\"gitlabProjectId\\\": \\\"string\\\",\n    \\\"gitlabProjectUrl\\\": \\\"string\\\",\n    \\\"defaultBranch\\\": \\\"string\\\",\n    \\\"isActive\\\": true,\n    \\\"reviewConfig\\\": {},\n    \\\"webhookId\\\": \\\"string\\\",\n    \\\"members\\\": [...],\n    \\\"statistics\\\": {...},\n    \\\"createdAt\\\": \\\"datetime\\\"\n  }\n}\n```\n\n#### PUT /api/projects/:id\n```json\n{\n  \\\"request\\\": {\n    \\\"name\\\": \\\"string\\\",\n    \\\"description\\\": \\\"string\\\",\n    \\\"defaultBranch\\\": \\\"string\\\",\n    \\\"reviewConfig\\\": {}\n  },\n  \\\"response\\\": {\n    \\\"project\\\": {...}\n  }\n}\n```\n\n#### DELETE /api/projects/:id\n```json\n{\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Project deleted successfully\\\"\n  }\n}\n```\n\n### Project Configuration APIs\n\n#### GET /api/projects/:id/config\n```json\n{\n  \\\"response\\\": {\n    \\\"reviewRules\\\": {\n      \\\"enableAutoReview\\\": true,\n      \\\"reviewTriggers\\\": [\\\"merge_request\\\", \\\"push\\\"],\n      \\\"excludePatterns\\\": [\\\"*.md\\\", \\\"test/*\\\"],\n      \\\"requireApproval\\\": true\n    },\n    \\\"aiConfig\\\": {\n      \\\"provider\\\": \\\"openai\\\",\n      \\\"model\\\": \\\"gpt-4\\\",\n      \\\"maxTokens\\\": 4000,\n      \\\"temperature\\\": 0.1\n    },\n    \\\"notifications\\\": {\n      \\\"email\\\": true,\n      \\\"webhook\\\": \\\"https://example.com/hook\\\",\n      \\\"slack\\\": \\\"#dev-team\\\"\n    }\n  }\n}\n```\n\n#### PUT /api/projects/:id/config\n```json\n{\n  \\\"request\\\": {\n    \\\"reviewRules\\\": {...},\n    \\\"aiConfig\\\": {...},\n    \\\"notifications\\\": {...}\n  },\n  \\\"response\\\": {\n    \\\"config\\\": {...},\n    \\\"message\\\": \\\"Configuration updated successfully\\\"\n  }\n}\n```\n\n### Project Members APIs\n\n#### GET /api/projects/:id/members\n```json\n{\n  \\\"response\\\": {\n    \\\"members\\\": [\n      {\n        \\\"id\\\": \\\"uuid\\\",\n        \\\"userId\\\": \\\"uuid\\\",\n        \\\"user\\\": {\n          \\\"id\\\": \\\"uuid\\\",\n          \\\"username\\\": \\\"string\\\",\n          \\\"email\\\": \\\"string\\\",\n          \\\"avatar\\\": \\\"string\\\"\n        },\n        \\\"role\\\": \\\"owner|admin|member|viewer\\\",\n        \\\"permissions\\\": [...],\n        \\\"addedAt\\\": \\\"datetime\\\"\n      }\n    ]\n  }\n}\n```\n\n#### POST /api/projects/:id/members\n```json\n{\n  \\\"request\\\": {\n    \\\"userIds\\\": [\\\"uuid\\\"],\n    \\\"role\\\": \\\"member\\\"\n  },\n  \\\"response\\\": {\n    \\\"added\\\": [...],\n    \\\"failed\\\": [...],\n    \\\"message\\\": \\\"Members added successfully\\\"\n  }\n}\n```\n\n#### PUT /api/projects/:id/members/:memberId\n```json\n{\n  \\\"request\\\": {\n    \\\"role\\\": \\\"admin\\\"\n  },\n  \\\"response\\\": {\n    \\\"member\\\": {...},\n    \\\"message\\\": \\\"Member role updated\\\"\n  }\n}\n```\n\n#### DELETE /api/projects/:id/members/:memberId\n```json\n{\n  \\\"response\\\": {\n    \\\"message\\\": \\\"Member removed successfully\\\"\n  }\n}\n```\n\n### GitLab Integration APIs\n\n#### POST /api/projects/:id/gitlab/verify\n```json\n{\n  \\\"response\\\": {\n    \\\"isValid\\\": true,\n    \\\"projectInfo\\\": {\n      \\\"id\\\": \\\"number\\\",\n      \\\"name\\\": \\\"string\\\",\n      \\\"url\\\": \\\"string\\\",\n      \\\"defaultBranch\\\": \\\"string\\\",\n      \\\"visibility\\\": \\\"private|internal|public\\\"\n    },\n    \\\"permissions\\\": {\n      \\\"canCreateWebhook\\\": true,\n      \\\"canReadProject\\\": true\n    }\n  }\n}\n```\n\n#### POST /api/projects/:id/gitlab/webhook\n```json\n{\n  \\\"request\\\": {\n    \\\"events\\\": [\\\"merge_requests\\\", \\\"push\\\"]\n  },\n  \\\"response\\\": {\n    \\\"webhookId\\\": \\\"string\\\",\n    \\\"webhookUrl\\\": \\\"string\\\",\n    \\\"events\\\": [...],\n    \\\"message\\\": \\\"Webhook configured successfully\\\"\n  }\n}\n```\n\n#### GET /api/projects/:id/gitlab/sync-status\n```json\n{\n  \\\"response\\\": {\n    \\\"status\\\": \\\"synced|syncing|failed\\\",\n    \\\"lastSyncAt\\\": \\\"datetime\\\",\n    \\\"syncErrors\\\": [...],\n    \\\"webhookStatus\\\": \\\"active|inactive\\\",\n    \\\"projectMetadata\\\": {...}\n  }\n}\n```\n\n#### POST /api/projects/:id/gitlab/sync\n```json\n{\n  \\\"response\\\": {\n    \\\"syncJobId\\\": \\\"uuid\\\",\n    \\\"message\\\": \\\"Sync initiated\\\"\n  }\n}\n```\n\n### Project Statistics APIs\n\n#### GET /api/projects/:id/statistics\n```json\n{\n  \\\"query\\\": {\n    \\\"dateFrom\\\": \\\"2025-01-01\\\",\n    \\\"dateTo\\\": \\\"2025-01-31\\\",\n    \\\"granularity\\\": \\\"day|week|month\\\"\n  },\n  \\\"response\\\": {\n    \\\"overview\\\": {\n      \\\"totalReviews\\\": 156,\n      \\\"averageQualityScore\\\": 8.5,\n      \\\"issuesFound\\\": 42,\n      \\\"issuesResolved\\\": 38\n    },\n    \\\"trends\\\": [\n      {\n        \\\"date\\\": \\\"2025-01-01\\\",\n        \\\"reviews\\\": 5,\n        \\\"qualityScore\\\": 8.2,\n        \\\"issues\\\": 2\n      }\n    ],\n    \\\"memberContributions\\\": [\n      {\n        \\\"userId\\\": \\\"uuid\\\",\n        \\\"username\\\": \\\"string\\\",\n        \\\"reviews\\\": 23,\n        \\\"qualityScore\\\": 8.8\n      }\n    ]\n  }\n}\n```\n\n#### GET /api/projects/:id/statistics/export\n```json\n{\n  \\\"query\\\": {\n    \\\"format\\\": \\\"csv|json|pdf\\\",\n    \\\"dateFrom\\\": \\\"2025-01-01\\\",\n    \\\"dateTo\\\": \\\"2025-01-31\\\"\n  },\n  \\\"response\\\": {\n    \\\"downloadUrl\\\": \\\"string\\\",\n    \\\"expiresAt\\\": \\\"datetime\\\"\n  }\n}\n```\n\n## Database Requirements\n\n### Projects Table Schema\n```sql\nCREATE TABLE projects (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  gitlab_project_id VARCHAR(50) NOT NULL,\n  gitlab_project_url VARCHAR(500) NOT NULL,\n  default_branch VARCHAR(100) DEFAULT 'main',\n  is_active BOOLEAN DEFAULT true,\n  review_config JSON,\n  webhook_id VARCHAR(100),\n  webhook_secret VARCHAR(255),\n  owner_id UUID NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW(),\n  \n  INDEX idx_owner_id (owner_id),\n  INDEX idx_gitlab_project_id (gitlab_project_id),\n  INDEX idx_is_active (is_active),\n  UNIQUE KEY uk_gitlab_project (gitlab_project_id),\n  FOREIGN KEY (owner_id) REFERENCES users(id)\n);\n```\n\n### Project Members Table Schema\n```sql\nCREATE TABLE project_members (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  project_id UUID NOT NULL,\n  user_id UUID NOT NULL,\n  role ENUM('owner', 'admin', 'member', 'viewer') NOT NULL,\n  permissions JSON,\n  added_by UUID NOT NULL,\n  added_at TIMESTAMP DEFAULT NOW(),\n  \n  UNIQUE KEY uk_project_user (project_id, user_id),\n  INDEX idx_project_id (project_id),\n  INDEX idx_user_id (user_id),\n  INDEX idx_role (role),\n  FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (added_by) REFERENCES users(id)\n);\n```\n\n### Project Statistics Table Schema\n```sql\nCREATE TABLE project_statistics (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  project_id UUID NOT NULL,\n  date DATE NOT NULL,\n  total_reviews INT DEFAULT 0,\n  successful_reviews INT DEFAULT 0,\n  failed_reviews INT DEFAULT 0,\n  average_quality_score DECIMAL(3,2),\n  issues_found INT DEFAULT 0,\n  issues_resolved INT DEFAULT 0,\n  lines_reviewed INT DEFAULT 0,\n  created_at TIMESTAMP DEFAULT NOW(),\n  \n  UNIQUE KEY uk_project_date (project_id, date),\n  INDEX idx_project_id (project_id),\n  INDEX idx_date (date),\n  FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE\n);\n```\n\n### Project Activity Log Schema\n```sql\nCREATE TABLE project_activity_log (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  project_id UUID NOT NULL,\n  user_id UUID,\n  action VARCHAR(50) NOT NULL,\n  resource_type VARCHAR(50),\n  resource_id VARCHAR(100),\n  details JSON,\n  ip_address INET,\n  user_agent TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  \n  INDEX idx_project_id (project_id),\n  INDEX idx_user_id (user_id),\n  INDEX idx_action (action),\n  INDEX idx_created_at (created_at),\n  FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n## Service Dependencies\n\n### External Dependencies\n- **GitLab API v4**: 项目信息获取和 Webhook 管理\n- **Redis**: 缓存和会话存储\n- **队列服务**: 异步任务处理（同步、统计）\n- **文件存储**: 导出文件存储\n\n### Internal Dependencies\n- **用户认证模块**: 用户身份验证\n- **权限管理模块**: 访问控制\n- **通知服务**: 事件通知\n- **审计日志模块**: 操作记录\n\n## Security Considerations\n\n### Data Protection\n- 项目配置敏感信息加密存储\n- GitLab 访问令牌安全管理\n- Webhook 签名验证\n- 数据库连接加密\n\n### Access Control\n- 基于项目的数据隔离\n- 细粒度权限控制\n- API 访问频率限制\n- 跨项目访问防护\n\n### Audit & Monitoring\n- 所有操作审计日志\n- 敏感操作二次确认\n- 异常访问检测\n- 权限变更通知\n\n## Error Handling\n\n### Error Response Format\n```json\n{\n  \\\"error\\\": {\n    \\\"code\\\": \\\"PROJECT_001\\\",\n    \\\"message\\\": \\\"Project not found\\\",\n    \\\"details\\\": \\\"The specified project does not exist or you don't have access\\\",\n    \\\"timestamp\\\": \\\"2025-01-01T00:00:00Z\\\"\n  }\n}\n```\n\n### Error Codes\n- **PROJECT_001**: 项目不存在\n- **PROJECT_002**: 权限不足\n- **PROJECT_003**: GitLab 集成失败\n- **PROJECT_004**: 配置验证失败\n- **PROJECT_005**: 成员操作失败\n- **PROJECT_006**: 统计数据不可用\n- **GITLAB_001**: GitLab API 访问失败\n- **GITLAB_002**: Webhook 配置失败\n\n## Constraints\n\n### Technical Constraints\n- NestJS + TypeScript + Prisma 技术栈\n- RESTful API 设计规范\n- OpenAPI 3.0 文档标准\n- 微服务架构兼容性\n\n### Business Constraints\n- 项目数量按套餐限制\n- 成员数量限制\n- GitLab 访问权限要求\n- 数据保留期限策略\n\n### Performance Constraints\n- 单项目最大成员数：1000\n- 统计查询时间范围限制：1年\n- 批量操作最大数量：100\n- API 请求频率限制\n\n## Acceptance Criteria\n\n### AC1: 项目创建流程\n1. 接收项目创建请求\n2. 验证 GitLab 项目访问权限\n3. 创建项目记录\n4. 初始化默认配置\n5. 设置创建者为项目所有者\n6. 配置 GitLab Webhook\n7. 返回完整项目信息\n\n### AC2: 配置管理流程\n1. 验证用户权限\n2. 验证配置参数\n3. 更新项目配置\n4. 记录配置变更历史\n5. 通知相关成员\n6. 返回更新结果\n\n### AC3: 成员管理流程\n1. 验证操作权限\n2. 验证用户有效性\n3. 执行成员操作\n4. 更新权限缓存\n5. 记录操作日志\n6. 发送通知\n\n### AC4: 统计分析流程\n1. 验证查询权限\n2. 构建统计查询\n3. 执行数据聚合\n4. 格式化响应数据\n5. 缓存查询结果\n6. 返回统计报告\n\n## Dependencies\n\n### External Dependencies\n- GitLab API v4\n- Redis 缓存服务\n- 队列处理服务\n- 文件存储服务\n\n### Internal Dependencies\n- 用户认证模块\n- 权限管理模块\n- GitLab 集成模块\n- 通知服务模块\n\n## Risks\n\n### 风险1: GitLab API 限流\n- **影响**: 高\n- **概率**: 中\n- **缓解**: API 调用频率控制、缓存策略、重试机制\n\n### 风险2: 数据量快速增长\n- **影响**: 高\n- **概率**: 高\n- **缓解**: 分表分库、数据归档、性能优化\n\n### 风险3: 权限模型复杂度\n- **影响**: 中\n- **概率**: 中\n- **缓解**: 标准化角色定义、权限简化、测试覆盖\n\n### 风险4: 配置数据丢失\n- **影响**: 高\n- **概率**: 低\n- **缓解**: 定期备份、版本控制、配置导入导出\n\n## Success Metrics\n\n1. **API 响应时间** < 500ms (95th percentile)\n2. **API 可用性** > 99.9%\n3. **项目创建成功率** > 95%\n4. **GitLab 集成成功率** > 90%\n5. **配置保存成功率** > 99%\n6. **统计查询性能** < 1s\n7. **用户满意度** > 4.0/5.0\n\n## Testing Requirements\n\n### Unit Testing\n- 项目管理服务单元测试覆盖率 > 85%\n- 配置管理服务单元测试覆盖率 > 85%\n- 权限验证服务单元测试覆盖率 > 90%\n\n### Integration Testing\n- GitLab API 集成测试\n- 数据库操作集成测试\n- 权限验证集成测试\n\n### Performance Testing\n- 项目列表查询性能测试\n- 配置保存性能测试\n- 统计查询性能测试\n- 批量操作性能测试",
  "fileStats": {
    "size": 17049,
    "lines": 739,
    "lastModified": "2025-09-24T17:52:06.447Z"
  },
  "comments": []
}