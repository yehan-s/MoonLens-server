// Prisma Schema for MoonLens
// 使用 MySQL 数据库

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  ADMIN
  USER
  GUEST
}

// 用户模型
model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String   // 存储 bcrypt 哈希后的密码
  salt              String?   // 可选的额外盐值（bcrypt 已经包含盐）
  fullName          String?
  avatar            String?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true)
  isLocked          Boolean   @default(false) // 账户锁定状态
  loginAttempts     Int       @default(0)      // 失败登录尝试次数
  lockedUntil       DateTime? // 账户锁定直到某个时间
  lastLoginAt       DateTime? // 最后登录时间
  lastLoginIp       String?   // 最后登录 IP
  emailVerified     Boolean   @default(false) // 邮箱验证状态
  emailVerifiedAt   DateTime? // 邮箱验证时间
  gitlabUserId      String?   @unique
  gitlabAccessToken String?   @db.Text
  gitlabRefreshToken String?  @db.Text // GitLab OAuth 刷新令牌
  preferences       Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联关系
  projects      Project[]
  reviews       Review[]
  loginHistory  LoginHistory[]
  refreshTokens RefreshToken[]
  sessions      Session[]

  @@index([email])
  @@index([gitlabUserId])
  @@index([isActive])
  @@map("users")
}

// 项目模型
model Project {
  id                String    @id @default(uuid())
  name              String
  description       String?   @db.Text
  gitlabProjectId   String
  gitlabProjectUrl  String
  defaultBranch     String?
  isActive          Boolean   @default(true)
  reviewConfig      Json?     // 包含自动审查配置、AI模型选择等
  webhookId         String?
  webhookSecret     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 关联关系
  ownerId String
  owner   User     @relation(fields: [ownerId], references: [id])
  reviews Review[]

  @@index([ownerId])
  @@index([gitlabProjectId])
  @@map("projects")
}

// 审查状态枚举
enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// 审查类型枚举
enum ReviewType {
  PUSH
  MERGE_REQUEST
  MANUAL
}

// 代码审查模型
model Review {
  id              String       @id @default(uuid())
  type            ReviewType   @default(MANUAL)
  status          ReviewStatus @default(PENDING)
  commitHash      String?
  branch          String?
  mergeRequestId  String?
  mergeRequestIid String?
  filesReviewed   Json?        // 存储审查的文件详情
  summary         Json?        // 存储审查摘要（问题数、质量分数等）
  aiResponse      String?      @db.LongText // AI 返回的完整响应
  processingTime  Int?         // 处理时间（毫秒）
  error           String?      @db.Text
  createdAt       DateTime     @default(now())
  completedAt     DateTime?

  // 关联关系
  projectId    String
  project      Project @relation(fields: [projectId], references: [id])
  requestedById String?
  requestedBy  User?   @relation(fields: [requestedById], references: [id])

  @@index([projectId])
  @@index([requestedById])
  @@index([status])
  @@index([createdAt])
  @@map("reviews")
}

// Webhook 事件记录
model WebhookEvent {
  id        String   @id @default(uuid())
  projectId String
  eventType String
  payload   Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([processed])
  @@map("webhook_events")
}

// AI 模型配置
model AIConfig {
  id          String   @id @default(uuid())
  name        String   @unique
  provider    String   // openai, anthropic, azure 等
  modelName   String   // gpt-4, claude-3 等
  apiEndpoint String?
  apiKey      String   @db.Text
  config      Json?    // 额外配置（temperature、maxTokens 等）
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_configs")
}

// 审查规则模型
model ReviewRule {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  category    String   // security, performance, style, best-practice 等
  severity    String   // critical, major, minor, info
  pattern     String?  @db.Text // 规则模式或正则表达式
  config      Json?    // 规则的额外配置
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("review_rules")
}

// Token 黑名单
model TokenBlacklist {
  id        String   @id @default(uuid())
  jti       String   @unique // JWT ID
  token     String   @db.Text
  userId    String
  reason    String?  // 撤销原因（logout, security, admin 等）
  expiresAt DateTime // Token 原本的过期时间
  createdAt DateTime @default(now())

  @@index([jti])
  @@index([userId])
  @@index([expiresAt])
  @@map("token_blacklist")
}

// 登录历史记录
model LoginHistory {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress   String
  userAgent   String   @db.Text
  deviceType  String?  // desktop, mobile, tablet
  deviceId    String?  // 设备指纹
  browser     String?
  os          String?
  location    String?  // 地理位置（基于 IP）
  success     Boolean
  failReason  String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([success])
  @@map("login_history")
}

// 刷新令牌
model RefreshToken {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @db.Text
  deviceId    String?  // 关联设备
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// 会话管理
model Session {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String   @unique
  deviceId    String?
  deviceName  String?  // "Chrome on MacOS"
  ipAddress   String
  userAgent   String   @db.Text
  location    String?
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

// 密码重置令牌
model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String   @unique
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@map("password_resets")
}

// 邮箱验证令牌
model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String   @unique
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@map("email_verifications")
}