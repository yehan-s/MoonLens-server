version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: moonlens-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: moonlens_db
      MYSQL_USER: moonlens
      MYSQL_PASSWORD: moonlens_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - moonlens-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: moonlens-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moonlens-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MoonLens 后端服务
  moonlens-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: moonlens-server
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_TYPE: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: moonlens
      DB_PASSWORD: moonlens_password
      DB_DATABASE: moonlens_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
      - "3001:3001"  # WebSocket 端口
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moonlens-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

networks:
  moonlens-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data: